#include <iostream>
#include <string.h>
#include <list.h>
#include "estado.cpp"

using namespace std;

class Camino{
public:
  Estado ult_nodo;
  //list<char> acciones;
  char* acciones;
  int costo;
  Camino(Estado ult_nodo, char* acciones, int costo);
  void print();
  void insert_accion(char new_accion);
};

Camino::Camino(Estado info_nodo, char* info_acciones, int info_costo){
  acciones = info_acciones;
  ult_nodo = info_nodo;
  costo=info_costo;
}

void Camino::print(){
<<<<<<< .mine
  list<char>::iterator walker;
  for( walker = acciones.begin(); walker != acciones.end(); walker++ ) {
    if (*walker=='u') cout<<" UP ";
    else if (*walker=='d') cout<<" DOWN ";
    else if (*walker=='l') cout<<" LEFT ";
    else if (*walker=='r') cout<<" RIGHT ";
=======
  int i;
  int j=strlen(acciones);
  for(i=0;i<j;i++){
  	if (*acciones=='u') cout<<" UP ";
	else if (*acciones=='d') cout<<" DOWN ";
	else if (*acciones=='l') cout<<" LEFT ";
	else if (*acciones=='r') cout<<" RIGHT ";
	acciones++;
>>>>>>> .r6
  }
}

void Camino::insert_accion(char accion){
  strcat(acciones,(char*)&accion);
}

<<<<<<< .mine
   int main(){
   char datos[]= "123456780";
   Estado nodo(datos);
   Camino camino1(nodo);
   camino1.acciones.push_back('u');
   camino1.acciones.push_back('r');
   camino1.acciones.push_back('d');
   cout<<"El tamano de la lista es "<<camino1.acciones.size()<<'\n';
   camino1.ult_nodo.print();
   camino1.print();
   return 1;
   }*/
=======
int main(){
  char datos[]= "123456780";
  char acciones[] = "udrul";
  int costo = 0; 
  Estado nodo(datos);
  Camino camino1(nodo,acciones,costo);
  cout<<acciones<<'\n';
  camino1.insert_accion('l');
  cout<<acciones<<'\n';
  camino1.print();
  return 1;
}
>>>>>>> .r6
