# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fitness', [dirname(__file__)])
        except ImportError:
            import _fitness
            return _fitness
        if fp is not None:
            try:
                _mod = imp.load_module('_fitness', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fitness = swig_import_helper()
    del swig_import_helper
else:
    import _fitness
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fitness.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _fitness.SwigPyIterator_value(self)
    def incr(self, n = 1): return _fitness.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _fitness.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _fitness.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _fitness.SwigPyIterator_equal(self, *args)
    def copy(self): return _fitness.SwigPyIterator_copy(self)
    def next(self): return _fitness.SwigPyIterator_next(self)
    def __next__(self): return _fitness.SwigPyIterator___next__(self)
    def previous(self): return _fitness.SwigPyIterator_previous(self)
    def advance(self, *args): return _fitness.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _fitness.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _fitness.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _fitness.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _fitness.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _fitness.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _fitness.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _fitness.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _fitness.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fitness.vectori___nonzero__(self)
    def __bool__(self): return _fitness.vectori___bool__(self)
    def __len__(self): return _fitness.vectori___len__(self)
    def pop(self): return _fitness.vectori_pop(self)
    def __getslice__(self, *args): return _fitness.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _fitness.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _fitness.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _fitness.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _fitness.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _fitness.vectori___setitem__(self, *args)
    def append(self, *args): return _fitness.vectori_append(self, *args)
    def empty(self): return _fitness.vectori_empty(self)
    def size(self): return _fitness.vectori_size(self)
    def clear(self): return _fitness.vectori_clear(self)
    def swap(self, *args): return _fitness.vectori_swap(self, *args)
    def get_allocator(self): return _fitness.vectori_get_allocator(self)
    def begin(self): return _fitness.vectori_begin(self)
    def end(self): return _fitness.vectori_end(self)
    def rbegin(self): return _fitness.vectori_rbegin(self)
    def rend(self): return _fitness.vectori_rend(self)
    def pop_back(self): return _fitness.vectori_pop_back(self)
    def erase(self, *args): return _fitness.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _fitness.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fitness.vectori_push_back(self, *args)
    def front(self): return _fitness.vectori_front(self)
    def back(self): return _fitness.vectori_back(self)
    def assign(self, *args): return _fitness.vectori_assign(self, *args)
    def resize(self, *args): return _fitness.vectori_resize(self, *args)
    def insert(self, *args): return _fitness.vectori_insert(self, *args)
    def reserve(self, *args): return _fitness.vectori_reserve(self, *args)
    def capacity(self): return _fitness.vectori_capacity(self)
    __swig_destroy__ = _fitness.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _fitness.vectori_swigregister
vectori_swigregister(vectori)

class vectorvectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorvectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorvectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _fitness.vectorvectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fitness.vectorvectori___nonzero__(self)
    def __bool__(self): return _fitness.vectorvectori___bool__(self)
    def __len__(self): return _fitness.vectorvectori___len__(self)
    def pop(self): return _fitness.vectorvectori_pop(self)
    def __getslice__(self, *args): return _fitness.vectorvectori___getslice__(self, *args)
    def __setslice__(self, *args): return _fitness.vectorvectori___setslice__(self, *args)
    def __delslice__(self, *args): return _fitness.vectorvectori___delslice__(self, *args)
    def __delitem__(self, *args): return _fitness.vectorvectori___delitem__(self, *args)
    def __getitem__(self, *args): return _fitness.vectorvectori___getitem__(self, *args)
    def __setitem__(self, *args): return _fitness.vectorvectori___setitem__(self, *args)
    def append(self, *args): return _fitness.vectorvectori_append(self, *args)
    def empty(self): return _fitness.vectorvectori_empty(self)
    def size(self): return _fitness.vectorvectori_size(self)
    def clear(self): return _fitness.vectorvectori_clear(self)
    def swap(self, *args): return _fitness.vectorvectori_swap(self, *args)
    def get_allocator(self): return _fitness.vectorvectori_get_allocator(self)
    def begin(self): return _fitness.vectorvectori_begin(self)
    def end(self): return _fitness.vectorvectori_end(self)
    def rbegin(self): return _fitness.vectorvectori_rbegin(self)
    def rend(self): return _fitness.vectorvectori_rend(self)
    def pop_back(self): return _fitness.vectorvectori_pop_back(self)
    def erase(self, *args): return _fitness.vectorvectori_erase(self, *args)
    def __init__(self, *args): 
        this = _fitness.new_vectorvectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fitness.vectorvectori_push_back(self, *args)
    def front(self): return _fitness.vectorvectori_front(self)
    def back(self): return _fitness.vectorvectori_back(self)
    def assign(self, *args): return _fitness.vectorvectori_assign(self, *args)
    def resize(self, *args): return _fitness.vectorvectori_resize(self, *args)
    def insert(self, *args): return _fitness.vectorvectori_insert(self, *args)
    def reserve(self, *args): return _fitness.vectorvectori_reserve(self, *args)
    def capacity(self): return _fitness.vectorvectori_capacity(self)
    __swig_destroy__ = _fitness.delete_vectorvectori
    __del__ = lambda self : None;
vectorvectori_swigregister = _fitness.vectorvectori_swigregister
vectorvectori_swigregister(vectorvectori)

class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr
    def iterator(self): return _fitness.vectorf_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fitness.vectorf___nonzero__(self)
    def __bool__(self): return _fitness.vectorf___bool__(self)
    def __len__(self): return _fitness.vectorf___len__(self)
    def pop(self): return _fitness.vectorf_pop(self)
    def __getslice__(self, *args): return _fitness.vectorf___getslice__(self, *args)
    def __setslice__(self, *args): return _fitness.vectorf___setslice__(self, *args)
    def __delslice__(self, *args): return _fitness.vectorf___delslice__(self, *args)
    def __delitem__(self, *args): return _fitness.vectorf___delitem__(self, *args)
    def __getitem__(self, *args): return _fitness.vectorf___getitem__(self, *args)
    def __setitem__(self, *args): return _fitness.vectorf___setitem__(self, *args)
    def append(self, *args): return _fitness.vectorf_append(self, *args)
    def empty(self): return _fitness.vectorf_empty(self)
    def size(self): return _fitness.vectorf_size(self)
    def clear(self): return _fitness.vectorf_clear(self)
    def swap(self, *args): return _fitness.vectorf_swap(self, *args)
    def get_allocator(self): return _fitness.vectorf_get_allocator(self)
    def begin(self): return _fitness.vectorf_begin(self)
    def end(self): return _fitness.vectorf_end(self)
    def rbegin(self): return _fitness.vectorf_rbegin(self)
    def rend(self): return _fitness.vectorf_rend(self)
    def pop_back(self): return _fitness.vectorf_pop_back(self)
    def erase(self, *args): return _fitness.vectorf_erase(self, *args)
    def __init__(self, *args): 
        this = _fitness.new_vectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fitness.vectorf_push_back(self, *args)
    def front(self): return _fitness.vectorf_front(self)
    def back(self): return _fitness.vectorf_back(self)
    def assign(self, *args): return _fitness.vectorf_assign(self, *args)
    def resize(self, *args): return _fitness.vectorf_resize(self, *args)
    def insert(self, *args): return _fitness.vectorf_insert(self, *args)
    def reserve(self, *args): return _fitness.vectorf_reserve(self, *args)
    def capacity(self): return _fitness.vectorf_capacity(self)
    __swig_destroy__ = _fitness.delete_vectorf
    __del__ = lambda self : None;
vectorf_swigregister = _fitness.vectorf_swigregister
vectorf_swigregister(vectorf)


def logicAnd(*args):
  return _fitness.logicAnd(*args)
logicAnd = _fitness.logicAnd

def check_1s(*args):
  return _fitness.check_1s(*args)
check_1s = _fitness.check_1s

def computeFitness(*args):
  return _fitness.computeFitness(*args)
computeFitness = _fitness.computeFitness


